問題5-1
(1)
カラムの値を直接採用する方法もあるがカラムの値が更新された際には正しく動作しなくなるのでこれはよくない
(A)UPDATE 試験結果
      SET 午後1 = 平均点 * 4 - 午前 - 午後2 - 論述
    WHERE 受験者ID = 'SW1046'
(B) UPDATE 試験結果 
      SET 論述 = 平均点 * 4 - 午前 - 午後1 - 午後2
   WHERE 受験者ID = 'SW1350'
(C) UPDATE 試験結果
      SET 午前 = 平均点 * 午後1 - 午後2 - 論述
    WHERE 受験者ID = 'SW1877'

2. SELECT 受験者ID AS 合格者ID
     FROM 試験結果
    WHERE 午前 >= 60 AND (午前1 + 午前2) >= 120 AND 論述 >= (午前 + 午後1 + 午後2) * 0.3 

問題5-2
1. UPDATE 回答者
      SET 国名 = CASE SUBSTRING(メールアドレス , -1 , 2)
                 WHEN 'jp' THEN '日本'
                 WHEN 'uk' THEN 'イギリス'
                 WHEN 'cn' THEN '中国'
                 WHEN 'fr' THEN 'フランス'
                 ELSE 'ベトナム'
   WHERE 国名 IS NULL

2. SELECT TRIM(メールアドレス), 
          CONCAT(CASE 年齢 
                 WHEN BETWEEN 20 AND 29 THEN 20
                 WHEN BETWEEN 30 AND 39 THEN 30
                 WHEN BETWEEN 40 AND 49 THEN 40
                 ELSE 50 END
                 || '代' || ':' ||
                 CASE 住居
                 WHEN 'D' THEN '戸建て'
                 ELSE '集合住宅' END) AS 属性
     FROM 回答者

-----------------------------------問題5-2の回答--------------------------------------------
UPDATE 回答者 
   SET 国名 = CASE SUBSTRING(TRIM(メールアドレス),
                             LENGTH(TRIM(メールアドレス))-1 , 2)
              WHEN 'jp' THEN '日本'
              WHEN 'uk' THEN 'イギリス'
              WHEN 'cn' THEN '中国'
              WHEN 'fr' THEN 'フランス'
              WHEN 'vn' THEN 'ベトナム' END
*データ型がCHAR型だと前後に余計な空白が入っている可能性があるのでTRIM関数を用いて空白を削除した状態でないと正しく文字列の長さを取得できない

SELECT TRIM(メールアドレス) AS メールアドレス,
  CASE WHEN 年齢 >= 20 AND 年齢 <= 29 THEN '20代'
       WHEN 年齢 >= 30 AND 年齢 <= 39 THEN '30代'
       WHEN 年齢 >= 40 AND 年齢 <= 49 THEN '40代'
       ELSE '50代' END 
       || ':' || 
  CASE WHEN 'D' THEN '戸建て'
       WHEN 'C' THEN '集合住宅' AS 属性
       FROM 回答者
*CASE文の中のWHNE句にはBETWEENを使用するよりもANDを用いて範囲を用いて指定した方がいい
*文字列の結合を行うには+ , || , CONCATの3種類が存在する

問題5-3
1. UPDATE 受注
      SET = LENGTH(REPLACE(文字 , ' ' , ''))
    WHERE 文字数 IS NULL

2. SELECT 受注日, 受注ID, 文字数, 
   CASE 書体コード WHEN (1 OR 書体コード IS NULL) THEN 'ブロック体'
                  WHEN 2 THEN '筆記体'
                  ELSE '草書体' END AS 書体名,
   CASE 書体コード WHEN (1 OR 書体コード IS NULL) THEN 100
                  WHEN 2 THEN 150
                  ELSE 200 END AS 単価, 
   CASE WHEN 文字数 > 10 THEN 500
        ELSE 0 END AS 特別加工料
    FROM 受注
   ORDER BY 受注日 , 受注ID

3. UPDATE 受注 
      SET 文字 = REPLACE(文字, ' ' , '★')
    WHERE 受注ID = '113'

---------------------------------問題5-3の正答-------------------------------------------
SELECT 受注日, 受注ID, 文字数,
       CASE COALESCE(書体コード, '1')
         WHEN '1' THEN 'ブロック体'
         WHEN '2' THEN '筆記体'
         WHEN '3' THEN '草書体' END AS 書体名,
       CASE COALESCE(書体コード, '1')
         WHEN '1' THEN 100
         WHEN '2' THEN 150
         WHEN '3' THEN 200 END AS 単価
       CASE WHEN 文字数 > 10 THEN 500
          ELSE 0 END AS 特別加工料
  FROM 受注 ORDER BY 受注日, 受注ID
*カラムの中にNULLを含むデータが存在する時にはCOALESCEを使用することで効率的にかけるかもしれない

問題6-1
1. SELECT SUM(降水量) AS 年間降水量の合計 , AVG(最高気温) AS 年間の最高気温の平均 , AVG(最低気温 AS) 年間の最低気温の平均
     FROM 都市別気象観測
2. SELECT 月, SUM(降水量) , AVG(最高気温) , AVG(最低気温)
     FROM 都市別気象観測
    WHERE 都市名 = '東京'
    GROUP BY 月 
3. SELECT 都市名 , AVG(降水量) , MIN(最高気温) , MAX(最低気温)
     FROM 都市別気象観測
   GROUP BY 都市名
4. SELECT 月 , AVG(降水量) , AVG(最高気温) , AVG(最低気温)
     FROM 都市別気象観測
   GROUP BY 月
5. SELECT 月, 都市名, 気温
     FROM 都市別気象観測
   GROUP BY 月, 都市名, 気温
   HAVING MAX(最高気温) >= 38
6. SELECT 月, 都市名, 気温
     FROM 都市別気象観測
   GROUP BY 月, 都市名, 気温
   HAVING MIN(最低気温) <= -10 

----------------------------------------問題6-1の正答------------------------------------------------
2. SELECT SUM(降水量) , AVG(最高気温) , AVG(最低気温)
     FROM 都市別気象観測
    WHERE 都市名 = '東京'
東京で絞込を行ったら東京の各月のデータのみが残るのでそれに対して集計関数を使用すれば自動的に月ごとの平均を取得することができる

5. SELECT 都市名, MAX(最高気温)
     FROM 都市別気象観測
    GROUP BY 都市名←これを行うことで各都市の最高気温の最大値を取得できる
    HAVING MAX(最高気温) >= 38
6. SELECT 都市名, MIN(最低気温)
     FROM 都市別気象観測
  GROUP BY 都市名
  HAVING MIN(最低気温) <= -10

問題6-2
1. SELECT COUNT(*)
     FROM 入退室管理
    WHERE 退室 IS NULL
2. SELECT COUNT(*)
     FROM 入退室管理
    GROUP BY 社員名
    ORDER BY 
3. SELECT CASE 事由区別 WHERE '1' THEN 'メンテナンス'
                       WHERE '2' THEN 'リリース作業'
                       WHERE '3' THEN '障害対応'
                       ELSE 'その他' END , COUNT(*)
     FROM 入退室管理
    GROUP BY 事由区別
4. SELECT 社員名, COUNT(*)
     FROM 入退室管理
  GROUP BY 社員名
  HAVING COUNT(*) > 10
5. SELECT 日付 , COUNT(*)
     FROM 入退室管理
    WHERE 事由区別 = '3'
  GROUP BY 日付

----------------------------------------問題6-2の正答--------------------------------------------
2. SELECT 社員名, COUNT(*) AS 入室回数
     FROM 入退室管理
    GROUP BY 社員名
    ORDER BY 2 DESC←ここで指定されている2という数字はSELECTで選択されているCOUNT(*) AS 入室回数を表している

SELECT 社員名, COUNT(*) AS 入室回数
  FROM 入退室管理
  GROUP BY 社員名
  ORDER BY 入室回数 DESCでも同じ意味を表すSQLになっている

問題6-3
3. SELECT COUNT(*) FROM 販売履歴 GROUP BY 商品名
   →SELECT COUNT(商品名) FROM 販売履歴 GROUP BY 商品名
    SELECT 商品名, COUNT(*) FROM 販売履歴 GROUP BY 商品名
5. SELECT 商品区分, 商品名, COUNT(*) FROM 販売履歴 GROUP BY 商品名
6. SELECT 商品区分, 商品名, COUNT(*) FROM 販売履歴
  GROUP BY 商品区分, 商品名
  HAVING AVG(価格) >= 1000

-----------------------------------------問題6-3-----------------------------------------
2. SELECT 商品名, COUNT(*) FROM 販売履歴
→GROUP BYによる商品名の指定が無いので作成される表がでこぼこになる。
6. SELECT 商品区分, 商品名, COUNT(*) FROM 販売履歴
  GROUP BY 商品区分, 商品名
  HAVING AVG(価格) >= 1000←ここで実行されるHAVINGの内容は集約関数を実行した後に絞り込みとして使用される


問題5-1
1. (A) UPDATE 試験結果
          SET 午後1 = 平均点 * 4 - 午前 - 午後2 - 論述
        WHERE 受験者ID = 'SW1046'
   (B) UPDATE 試験結果
          SET 論述 = 平均点 * 4 - 午前 - 午後1 - 午後2
        WHERE 受験者ID = 'SW1350'
   (C) UPDATE 試験結果
          SET 論述 = 平均点 * 4 - 午後1 - 午後2 - 論述
2. SELECT 受験者ID AS 合格者ID
     FROM 試験結果
    WHERE 午前 >= 60 AND (午後1 + 午後2) >= 120 AND 論述 >= (午前 + 午後1 + 午後2) * 0.3

問題5-2
1. UPDATE 回答者
      SET 国名 = CASE SUBSTRING(TRIM(メールアドレス , LENGTH(TRIM(メールアドレス)) - 1) , 2)
                 WHERE 'jp' THEN '日本'
                 WHERE 'uk' THEN 'イギリス'
                 WHERE 'cn' THEN '中国'
                 WHERE 'fr' THEN 'フランス'
                 ELSE 'ベトナム' END 
2. SELECT TRIM(メールアドレス) AS メールアドレス,
          CASE WHEN 20 <= 年齢 AND 年齢 < 30 THEN '20代'
               WHEN 30 <= 年齢 AND 年齢 < 40 THEN '30代'
               WHEN 40 <= 年齢 AND 年齢 < 50 THEN '40代'
               WHEN 50 <= 年齢 AND 年齢 < 60 THEN '50代' END
                 || ':' ||
          CASE WHEN 住居 WHEN 'D' THEN '戸建て'
               ELSE '集合住宅' END AS 属性
    FROM 回答者

問題5-3
1. UPDATE 受注
     SET 文字数 = LENGTH(REPLACE(文字, " ", ""))
2. SELECT 受注日, 受注ID, 文字数,
          CASE COALESCE(書体コード , '1') WHEN '1' THEN 'ブロック体'
                                         WHEN '2' THEN '筆記体'
                                         WHEN '3' THEN '草書体' END AS 書体名,
          CASE COALESCE(書体コード , '2') WHEN '1' THEN 100
                                         WHEN '2' THEN 150
                                         WHEN '3' THEN 200 END AS 単価,
          CASE WHEN LENGTH(文字数) > 10 THEN 500
               ELSE 0 END AS 特別加工料
     FROM 受注
3. UPDATE 受注  
      SET 文字 = REPLACE(文字, " " , "★") 
    WHERE 受注ID = '113'


問題6-1
1. SELECT SUM(降水量) AS 年間降水量 , AVG(最高気温) AS 最高気温の平均 , AV(最低気温) AS 最低気温の平均
     FROM 都市別気象観測
2. SELECT SUM(降水量) AS 東京の年間降水量 , AVG(最高気温) AS 最高気温の平均 , AV(最低気温) AS 最低気温の平均
     FROM 都市別気象観測
    WHERE 都市名 = '東京'  
3. SELECT 都市名, AVG(降水量) , MIN(最高気温) , MAX(最低気温)
     FROM 都市別気象観測
   GROUP BY 都市名
4. SELECT 月, AVG(降水量) , AVG(最高気温) , AVG(最低気温)
     FROM 都市別気象観測
   GROUP BY 月
5. SELECT 都市名, MAX(最高気温)
     FROM 都市別気象観測
　 GROUP BY 都市名
  HAVING MAX(最高気温) >= 38
6. SELECT 都市名, MIN(最低気温)
     FROM 都市別気象観測
   GROUP BY 都市名
   HAVING MIN(最低気温) <= -10

問題6-2
1. SELECT COUNT(*)
     FROM 入退室管理
    WHERE 退室 IS NULL
2. SELECT 社員名, COUNT(*) AS 入室回数
     FROM 入退室管理
   GROUP BY 社員名
   ORDER BY 入室回数 DESC
3. SELECT CASE 事由区別 WHEN '1' THEN 'メンテナンス'
                       WHEN '2' THEN 'リリース作業'
                       WHEN '3' THEN '障害対応'
                       WHEN '9' THEN 'その他' END AS 事由区別 , COUNT(*)
     FROM 入退室管理
    GROUP BY 事由区別
4. SELETC 社員名 , COUNT(*) AS 入室回数
     FROM 入退室管理
   GROUP BY 社員名
   HAVING COUNT(*) > 10
5. SELECT 日付, COUNT(*)
     FROM 入退室管理
    WHERE 事由区別 = '3'
   GROUP BY 日付


問題7-1
(A)単一副問合せ
(B)SELECT 
(C)SET
(D)n 
(E)1
(F)複数副問合せ
(G)ANY/ALL
(H)IN
(I)FROM
(J)表
(K)INSERT
----------------------------------------問題7-1の正答-------------------------------------------------
(A)単一行副問合せ
(F)複数行副問合せ

問題7-2
1. SELECT 価格 * (SELECT SUM(レンタル日数)
                   FROM  レンタル
                   WHERE 車種コード = 'E01') AS 金額
     FROM 料金
    WHERE 車種コード = 'E01'
→26400

2. SELECT 車種コード, 車種名
     FROM 料金
    WHERE 車種コード IN (SELECT 車種コード FROM レンタル 
                         WHERE レンタル日数 > 1)
   ORDER BY 車種コード

→ 車種コード | 車種名
  ----------|---------
     E01    | エコカー
     S01    | 軽自動車
     S02    | ハッチバック

3. SELECT SUM(SUB.日数) AS 合計日数,
          COUNT(SUB.車種コード) AS 車種数
     FROM (SELECT 車種コード, SUM(レンタル日数) AS 日数
             FROM レンタル
          GROUP BY 車種コード) AS SUB 

→   合計日数 | 車種数
       12   |   3

問題7-3
1. INSERT INTO 頭数集計
      SET = (SELECT 飼育県, COUNT(*) AS 頭数
               FROM 個体識別
             GROUP BY 飼育県)
2.   SELECT 都道府県, 個体識別番号, 
            CASE 雄雌 WHEN '1' THEN '雄'
                  　  WHEN '2' THEN '雌' END AS 雄雌
       FROM 個体識別
      WHERE 
3.  副問合せ
    SELECT 母牛番号
      FROM 個体識別
    SELECT 個体識別番号,
           CASE 品種 WHEN '01' THEN '乳用種'
               　    WHEN '02' THEN '肉用種'
                     WHEN '03' THEN '交雑種' END AS 品種, 出生日, 母牛番号
      FROM 個体識別
     WHERE '01' = (SELECT 母牛番号
                     FROM 個体識別 
                    WHERE )

----------------------------------------問題7-3の正答-----------------------------------------
2. SELECT 飼育県 AS 都道府県, 個体識別番号,
     CASE 雄雌コード WHEN '1' THEN '雄'
                    WHEN '2' THEN '雌' END AS 雄雌
     FROM 個体識別
    WHERE 飼育県 IN (SELECT 飼育県 FROM 頭数集計
                     ORDER BY 頭数 DESC
                    OFFSET 0  ROWS FETCH NEXT 3 ROWS ONLY)

3. SELECT 個体識別番号,
     CASE 品種コード WHEN '01' THEN '乳用種'
                    WHEN '02' THEN '肉用種'
                    WHEN '03' THEN '交雑種' END AS 品種, 出生日, 母牛番号
     FROM 個体識別 
    WHERE 母牛番号 IN ( SELECT 個体識別番号 FROM 個体識別番号
                        WHERE 品種コード = '01')


問題7-3
*副問合せを使用する問題では主問合せと副問合せに問題を分割してから結合することが一番わかりやすい
2. SELECT 都道府県名, 個体識別番号,
     CASE 雄雌 WHEN '1' THEN '雄'
               WHEN '2' THEN '雌' END AS 雄雌 
     FROM 個体識別
    WHERE 都道府県名 IN (SELECT 都道府県名 FROM 頭数集計 ORDER BY 頭数 DESC OFFSET 0 ROWS FETCH 3 ROWS ONLY)
*OFFSET FETCHは基本的にORDER BYを用いて並べ替えを行った後に使用する

3. SELECT 個体識別番号 ,
     CASE 品種コード WHEN '01' THEN '乳用種'
                    WHEN '02' THEN '肉洋種'
                    WHEN '03' THEN '交雑種' END AS 品種 , 出生日, 母牛番号
     FROM 個体識別
    WHERE 母牛番号 (SELECT 個体識別番号
                     FROM 個体識別 
                    WHERE 個体識別番号 = '01')


問題8-1
1.  A1 | A2 | B1 | B2
    1  | 3  | 1  | 2

2.  A1 | A2 | B1 | B2
→条件に一致する列なし

3.  A1   | A2   | B1 | B2
    NULL | NULL | 1  | 2
    NULL | NULL | 3  | NULL

4.  A.A1 | C.A2  | B1    | B2    |
     1     3      1      2      

----------------------------------------------問題8-1の正答--------------------------------------------
2.   A1 | A2 | B1 | B2
     2    4    1    2


問題8-2
1. SELECT 社員番号 , 社員.名前 , 部署.名前 AS 部署名
     FROM 社員
     JOIN 部署名
       ON 社員.部署ID = 部署.部署ID

2. SELECT 部下.社員番号 , 部下.名前, 上司.名前 AS 上司名
     FROM 社員 AS 部下
     LEFT JOIN 社員 AS 上司
       ON 部下.上司ID = 上司.社員番号

3. SELECT 社員.社員番号 , 社員.名前 , 部署.名前 AS 部署名 , 支店.名前 AS 勤務地
     FROM 社員 
     JOIN 部署
       ON 社員.部署ID = 部署.部署ID
     JOIN 支店
       ON 部署.本部拠点ID = 支店.支店ID→社員.勤務地ID = 支店.支店ID

4. SELECT 支店.支店ID AS 支店コード , 支店.名前 AS 支店名 , 社員.名前 AS 支店長名 , COUNT(*) AS 社員名
     FROM 支店
     JOIN 社員
       ON 支店.支店ID = 社員.勤務地ID

5. SELECT 社員番号 , 部下.名前 AS 名前 , 支店.名前 AS 本人勤務地 , 支店.名前 AS 上司勤務地
     FROM 社員 AS 部下
     JOIN 支店
       ON 部下.勤務地ID = 支店.支店ID
     JOIN 社員 AS 上司
       ON 支店.支店ID = 上司.勤務地ID 
       
 
-----------------------------------問題8-2の正答-------------------------------------
4. SELECT 支店ID AS 支店コード , K.名前 AS 支店名 , S.名前 AS 支店長名 , T.社員数
     FROM 支店 AS K
     JOIN 社員 AS S
       ON K.支店長ID = S.社員番号
     JOIN (SELECT COUNT(*) AS 社員数 , 勤務地ID
             FROM 社員 GROUP BY 勤務地ID) AS T 
       ON K.支店ID = T.勤務地ID

5. SELECT S1.社員番号 AS 社員番号 , S1.名前 AS 名前 , K1.名前 AS 本人勤務地 , K2.名前 AS 上司勤務地
     FROM 社員 AS S1
     JOIN 社員 AS S2 
       ON S1.上司ID = S2.社員番号
     AND S1.勤務地ID <> S2.勤務地ID←この条件が抜けていた
     JOIN 支店 AS K1
       ON S1.勤務地ID = K1.支店ID
     JOIN 支店 AS K2
       ON S2.勤務地ID = K2.支店ID 
1つのデータベースから複数のテーブルを作成する
社員と上司で区別できていたのだから部下と上司の勤務地でもテーブルを別にする


問題11-2
1. 名前 学部ID
2. SELECT 学籍番号 , 名前 , 生年月日 ,
   (SELECT 学部名 
      FROM 学部 
     WHERE 学部.学部ID = 学生.学部ID) AS 学部名, 血液型
　   FROM 学生

  作成するビュー
  CREATE VIEW 学生情報 AS 
  SELECT 学籍番号 , 名前 , 生年月日 ,
  (SELECT 学部名
     FROM 学部 
    WHERE 学部.学部ID = 学生.学部ID) AS 学部名 , 血液型
     FROM 学生
3. INSERT INTO 学生 
   VALUES ('B1101022' , '古島 進' , '2024-02-12' , 'A' , 'K' , (SELECT NEXTVAL('ISTD')))

------------------------------------------問題11-2の正答---------------------------------------------------
2. ここで作成したSQL文はパフォーマンスの面でよくない。学生テーブルの各行に対してサブクエリが実行される
   下のSQLではONで条件に一致したものだけを選択列リストのレコードとして採用するので効率がいい
   CREATE VIEW 学生情報 AS 
   SELECT 学生.学籍番号 , 学生.名前 , 学生.生年月日 , 学生.血液型 , 学生.学部ID , 学部.名前 AS 学部名 
     FROM 学生 
     JOIN 学部 
       ON 学生.学部ID = 学部.ID 

