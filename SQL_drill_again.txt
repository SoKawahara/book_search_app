銀行口座テーブル

COUNT(*)では検索結果の行数を求める
COUNT(列)では指定した列の数を求める。その際にNULLは含まれない

49. SELECT SUM(残高) , MAX(残高) , MIN(残高) , AVG(残高) , COUNT(*)
      FROM 口座 
50. SELECT COUNT(*)
      FROM 口座 
     WHERE 種別 <> '1' AND 残高 >= 1000000 AND 更新日 < '2023-01-01'
51. SELECT COUNT(*) - COUNT(更新日) AS データ件数
      FROM 口座 
52. SELECT MAX(名義) , MIN(名義)
      FROM 口座 
53. SELECT MAX(更新日) , MIN(更新日)
      FROM 口座 
54. SELECT 種別 , SUM(残高) , MAX(残高) , MIN(残高) , AVG(残高) , COUNT(*) 
      FROM 口座 
    GROUP BY 種別 
55. SELECT SUBSTRING(口座番号 , 7 , 1) AS 口座番号の下１桁 , COUNT(*) AS データ件数
      FROM 口座 
    GROUP BY SUBSTRING(口座番号 , 7 , 1)
    ORDER BY COUNT(*) DESC 
56. SELECT COALESCE(SUBSTRING(CAST(更新日 AS VARCHAR) , 1 , 4) , 'XXXX年'), (残高) , MAX(残高) , MIN(残高) , AVG(残高) , COUNT(*) AS データ件数
      FROM 口座 
    GROUP BY COALESCE(SUBSTRING(CAST(更新日 AS VARCHAR) , 1 , 4) , 'XXXX年')
57. SELECT 種別 , SUM(残高) , COUNT(*)
      FROM 口座 
    GROUP BY 種別 
    HAVING SUM(残高) > 3000000
58. SELECT SUBSTRING(名義 , 1 , 1) , COUNT(*) , AVG(LENGTH(REPLACE(名義 , "　" , ""))) AS 名義文字数の平均
      FROM 口座 
    GROUP BY SUBSTRING(名義 , "　" , "") , 1 , 1
    HAVING COUNT(*) >= 10 AND AVG(LENGTH(REPLACE(名義 , "　" , ""))) > 5
59. UPDATE 口座　
　　　　SET 残高 = 残高 + (SELECT SUM(COALESCE(-入金額 , 出金額))
                            FROM 取引 
                           WHERE 口座番号 = '0351333' AND 日付 = '2024-01-11')
     WHERE 口座番号 = '0351333'
60. SELECT 残高 , (SELECT SUM(入金額) , SUM(出金額)
                     FROM 取引 
                    WHERE 口座番号 = '1115600' AND 日付 = '2023-12-28')
      FROM 口座 
     WHERE 口座番号 = '1115600'
61. SELECT 口座番号 , 名義 , 残高 
      FROM 口座 
     WHERE 口座番号 IN (SELECT 口座番号 
                         FROM 取引 
                        WHERE 入金額 >= 1000000)
62. SELECT *
      FROM 口座 
     WHERE 更新日 > ALL (SELECT 日付 FROM 取引)

63. 主問合せで求めたいもの→入金と出金が両方発生した日付、最大の入金額、最大の出金額
    SELECT T.日付 , MAX(T.入金額) , MAX(T.出金額)
      FROM (SELECT 日付 , 入金額 , 出金額 
              FROM 取引
             WHERE 口座番号 = '3104451') AS T 
     WHERE T.入金額 IS NOT NULL AND T.出金額 IS NOT NULL 
    
65. SELECT T.口座番号 , T.日付 , TJ.取引事由名 AS 取引事由名 , COALESCE(T.入金額 , T.出金額) AS 取引金額
      FROM 取引 AS T 
      JOIN 取引事由 AS TJ 
        ON T.取引事由ID = TJ.取引事由ID
     WHERE T.口座番号 IN ('0311240' , '1234161' , '2750902') 
     ORDER BY T.口座番号 , T.取引番号 
66. SELECT K.口座番号 , K.名義 , K.残高 , T.日付 , T.入金額 , T.出金額 
      FROM 口座 AS K 
      JOIN 取引 AS T 
        ON K.口座番号 = T.口座番号 
     WHERE K.口座番号 = '0887132'
    ORDER BY T.取引番号 
67. SELECT T.口座番号 , K.名義 , K.残高
      FROM 取引 AS T 
      JOIN 口座 AS K 
        ON T.口座番号 = K.口座番号 
     WHERE T.日付 = '2022-03-01'
68. SELECT T.口座番号 , K.名義 , K.残高  
      FROM 取引 AS T
      JOIN (SELECT 口座番号 , 名義 , 残高 FROM 口座 
             UNION 
            SELECT 口座番号 , '解約口座' , 0 FROM 廃止口座) AS K 
        ON T.取引番号 = K.口座番号 
     WHERE T.日付 = '2022-03-01'
69. SELECT T.口座番号 , CAST(TJ.取引事由ID CAST VARCHAR) || TJ.取引事由名 , T.日付 , T.口座番号 , T.入金額 , T.出金額  
      FROM 取引 AS T 
      RIGHT JOIN 取引事由 AS TJ 
               ON T.取引事由ID = TJ.取引事由ID 
70. SELECT DISTINCT COALESCE(TJ.取引事由ID , T.取引事由ID) AS 取引事由ID , COALESCE(TJ.取引事由名 , T.取引事由名) AS 取引事由名
      FROM 取引事由 AS TJ 
      FULL JOIN 取引 AS T 
             ON TJ.取引事由ID = T.取引事由ID 
            
71. SELECT K.口座番号 , K.名義 , K.残高 , T.日付 , TJ.取引事由名 , T.入金額 , T.出金額 
      FROM 口座 AS K 
      JOIN 取引 AS T 
        ON K.口座番号 = T.口座番号 
      JOIN 取引事由 AS TJ 
        ON T.取引事由ID = TJ.取引事由ID 
     WHERE K.口座番号 = '0887132'
72. SELECT K.口座番号 , K.名義 , K.残高 , T.日付 ,　T.取引事由 , T.入金額 , T.出金額 
      FROM 口座 AS K 
      JOIN 取引 AS T 
        ON K.口座番号 = T.口座番号 
     WHERE K.残高 >= 5000000 AND T.日付 >= '2024-01-01' AND COALESCE(T.入金額 , T.出金額) >= 1000000
73. SELECT 
      FROM 口座 AS K 
      JOIN (SELECT 口座番号 , 取引事由ID , 入金額 , 出金額 
              FROM 取引 
             WHERE COALESCE(入金額 , 出金額) >= 1000000 AND 日付 >= '2024-01-01') AS T 
        ON K.口座番号 = T.口座番号 
     WHERE K.残高 >= 5000000
74. SELECT T.口座番号 , T.日付 , COUNT(*) AS 回数 , K.名義 
      FROM 取引 AS T 
      JOIN 口座 AS K 
        ON T.口座番号 = K.口座番号 
    GROUP BY T.口座番号 , T.日付
    HAVING COUNT(*) >= 3
75. SELECT K1.名義 , K1.口座番号 , K1.種別 , K1.残高 , K1.更新日  
      FROM 口座 AS K1 
      JOIN 口座 AS K2 
        ON K1.口座番号 <> K2.口座番号 AND K1.名義 = K2.名義 
    ORDER BY K1.名義 , K1.口座番号
----------------------------------------銀行口座テーブルの正答------------------------------------
59. UPDATE 口座 
       SET 残高 = 残高 + (SELECT COALESCE(SUM(入金額) , 0) - COALESCE(SUM(出金額) , 0)
                           FROM 取引 
                          WHERE 口座番号 = '0351333' AND 日付 = '2024-01-11') , 更新日 = '2024-01-11'
     WHERE 口座番号 = '0351333'
*入金額、出金額の合計がNULLの時正常に値の比較を行うことができないのでCOALESCEを用いて値を0に設定している

60. SELECT 残高 , (SELECT SUM(入金額) FROM 取引 WHERE 口座番号 = '1115600' AND 日付 = '2023-12-28') AS 入金額合計 , 
                  (SELECT SUM(出金額) FROM 取引 WHERE 口座番号 = '115600' AND 日付 = '2023-12-28') AS 出金額合計
      FROM 口座 
     WHERE 口座番号 = '115600'
*SELECT文の選択列リストの中で使用される副問合せの結果は1行1列でないといけない。よって入金額合計、出金額合計の２つのパターンについて
別々に取得しないといけない

63. SELECT A.日付 , (SELECT MAX(入金額) FROM 取引 WHERE 口座番号 = '3104451') AS 最大入金額 ,
                    (SELECT MAX(出金額) FROM 取引 WHERE 口座番号 = '3104451') AS 最大出金額
      FROM (SELECT 日付 FROM 取引 WHERE 口座番号 = '3104451' GROUP BY 日付 HAVING SUM(入金額) > 0 AND SUM(出金額) > 0) AS A 
*1日に何度も同じ口座から入出金が行われる可能性があるので日付でグループ化を行って、１日の入出金の合計金額を求める

68. SELECT T.口座番号 , COALESCE(K.名義 , '解約済み') AS 名義 , COALESCE(K.残高 , 0) AS 残高
      FROM 取引 AS T 
      LEFT JOIN 口座 AS K 
             ON T.口座番号 = K.口座番号 
     WHERE T.日付 = '2022-03-01'
*解約された口座でも取引テーブルには口座番号が残っているので取引テーブルのLEFT JOINで結合することで廃止された口座番号
の名義と残高はNULLになるのでそれぞれ'解約済み'と0が設定される

74. SELECT K.口座番号 , T.回数 , K.名義 
      FROM 口座　AS K 
      JOIN (SELECT 口座番号 , COUNT(*) AS 回数
              FROM 取引
            GROUP BY 口座番号 , 日付
            HAVING COUNT(*) >= 3) AS T 
        ON K.口座番号 = T.口座番号 
*同じ日に同じ口座番号で複数回取引された口座については結合を行う前に絞り込むことができるのでそれは事前にやっておいた方がいい

75. SELECT DISTINCT K1.名義 , K1.口座番号 , K1.種別 , K1.残高 , K1.更新日 
      FROM 口座 AS K1 
      JOIN 口座 AS K1 
        ON K1.名義 = K2.名義 
    WHERE K1.口座番号 <> K2.口座番号 
    ORDER BY K1.名義 , K1.口座番号 
*自分の回答ではON句の中でK1.口座番号 <> K2.口座番号のように書いていたがこれは一般的にはWHERE句で指定するべき

-------------------------------------------------商店データベース-------------------------------------------------
55. SELECT 商品コード , 商品名 , 単価 , 
           (SELECT SUM(数量) FROM 注文 WHERE 商品コード = 'S0604') AS 数量 
      FROM 商品 
     WHERE 商品コード = 'S0604'
    
56. UPDATE 注文 
       SET 商品コード = (SELECT 商品コード
                          FROM 商品 
                         WHERE 商品区分 = '2' AND 商品名 LIKE '%ブーツ%' AND 商品名 LIKE '%雨%' AND 商品名 LIKE '%安心%')
     WHERE 注文日 = '2024-03-15' AND 注文番号 = '202403150014' AND 注文枝番 = 1 
57. SELECT 日付 , 商品コード 
      FROM 注文 
     WHERE 商品コード IN (SELECT 商品コード 
                           FROM 商品 
                          WHERE 商品名 LIKE '%あったか%')
    ORDER BY 日付 
58. SELECT 商品コード , AVG(数量) AS 平均販売数量 
      FROM 注文 
     WHERE 
59. SELECT T.数量 AS 割引による販売数, T.平均割引料 AS 平均割引料  
      FROM (SELECT SUM(数量) AS 数量 , TRUNC(AVG(クーポン割引料) , 0) AS 平均割引料
              FROM 注文 
             WHERE クーポン割引料 IS NOT NULL AND 商品コード = 'W0746') AS T 
60. INSERT INTO 注文 
    (注文日 , 注文番号 , 注文枝番 , 商品コード , 数量)
    VALUES ('2024-03-21' , '202403210080' , (SELECT MAX(注文枝番)
                                               FROM 注文
                                              WHERE 注文日 = '2024-03-21' AND 注文番号 = '2024093210080') + 1 , 'S1003' , 1)

    INSERT INTO 注文 
    VALUES ('2024-03-22' , '202403220901' , (SELECT MAX(注文枝番)
                                               FROM 注文 
                                              WHERE 注文日 = '2024-03-21' AND 注文番号 = '202403220901') + 1 , 'A0052' , 2 , 500)
61. SELECT T.注文番号 , T.注文枝番 , T.商品コード , S.商品名 , T.数量 
      FROM 取引 AS T 
      JOIN 商品 AS S 
        ON T.商品コード = S.商品コード 
     WHERE T.注文番号 = '202401130115'
    ORDER BY T.注文番号 , T.注文枝番 
62. SELECT T.注文日 , T.注文番号 , T.注文枝番 , T.数量 , H.単価 * T.数量 AS 注文金額
      FROM 注文 AS T 
      JOIN 廃番商品 AS H 
        ON T.商品コード = H.商品コード 
     WHERE H.商品コード = 'S0604' AND T.注文日 > H.廃番日 
63. SELECT S.商品コード , S.商品名 , S.単価 , T.注文日 , T.注文番号 , T.数量 , T.数量 * S.単価 AS 売上金額
      FROM 商品 AS S 
      JOIN 注文 AS T 
        ON S.商品コード = T.商品コード 
     WHERE S.商品コード = 'S0604'
    ORDER BY T.注文日 
64. SELECT T.商品コード , S.商品名
      FROM 注文 AS T 
      JOIN 商品 AS S 
        ON T.商品コード = S.商品コード 
     WHERE T.注文日 BETWEEN '2022-08-01' AND '2022-08-31'
65. SELECT T.商品コード , COALESCE(S.商品名 , '廃番') AS 商品名
      FROM 注文 AS T 
      LEFT JOIN 商品 AS S 
             ON T.商品コード = S.商品コード 
      JOIN 廃番商品 AS H 
        ON T.商品コード = H.商品コード 
     WHERE T.注文日 BETWEEN '2022-08-01' AND '2022-08-31'
66. SELECT T.注文日 , T.商品コード || ':' || S.商品名 , COALESCE(T.数量 , 0) AS 数量 
      FROM 商品 AS S 
      JOIN 注文 AS T 
        ON S.商品コード = T.商品コード
     WHERE S.商品区分 = '3'
67. 廃番になった商品→注文テーブルと商品テーブルを結合した際に結合できない
    SELECT T.注文日 , T.商品コード || ':' || COALESCE(S.商品名 , '(廃番済み)') , COALESCE(T.数量 , 0) AS 数量
      FROM 注文 AS T 
      LEFT JOIN 商品 AS S 
             ON T.商品コード = S.商品コード 
     WHERE S.商品区分 = '3'
68. SELECT T.注文日 , T.注文番号 , T.注文枝番 , T.商品コード , COALESCE(S.商品名 , H.商品名) AS 商品名 , COALESCE(S.単価 , H.単価) AS 単価 ,
           T.数量 , COALESCE(S.単価 , H.単価) * T.数量 - COALESCE(T.クーポン割引料 , 0) AS 注文金額
      FROM 注文 AS T 
      LEFT JOIN 商品 AS S 
        ON T.商品コード = S.商品コード 
      JOIN 廃番商品 AS H 
        ON T.商品コード = H.商品コード 
     WHERE T.注文番号 = '202304030010'
69. SELECT 
      FROM 注文 AS T 
      JOIN 商品 AS S 
        ON T.商品コード = S.商品コード
     WHERE T.商品コード LIKE 'B%'





-------------------------------------商品データベースの正答-------------------------------------------
58. SELECT 商品コード , SUM(数量) AS 数量 
      FROM 注文 
    GROUP BY 商品コード 
    HAVING SUM(数量) > ALL (SELECT AVG(数量) FROM 注文 GROUP BY 商品コード)
59. SELECT A.数量 AS 割引による販売数 , A.クーポン割引の合計 / A.数量 AS 平均割引額 
      FROM (SELECT SUM(数量) AS 数量 , SUM(クーポン割引料) AS クーポン割引の合計
              FROM 注文 
             WHERE クーポン割引料 IS NOT NULL AND 商品コード = 'W0746') AS A 
*商品１個当たりのクーポン割引料を求めるのでクーポン割引の合計を数量で割る必要があった
60. INSERT INTO 注文 
    SELECT 注文日 ,　注文番号 , MAX(注文枝番) + 1 , 'S1003' , 1 , NULL 
      FROM 注文 
     WHERE 注文日 = '2024-03-21' AND 注文番号 = '202403210080'
     GROUP BY 注文日 , 注文番号
*GROUP BYを記述しなくても意味的には同じになるが集計関数が意図しない動作を行う可能性があるのでこれは必ず書く
*GROUP BYを用いなくても集計関数だけなら使用することができるが選択列リストの中に集計関数以外の列を同時に入れると
でこぼこな表が出来上がるのでこれはよくない

67. SELECT T.注文日 , S.商品コード || ':' || S.商品名 AS 商品 , COALESCE(T.数量 , 0) AS 数量 
      FROM 注文 AS T 
      RIGHT JOIN (SELECT 商品コード , 商品名 , 商品区分 FROM 商品 
             UNION 
            SELECT 商品コード , '(廃番済み)' , AS 商品名 , 商品区分 FROM 廃番商品) AS S 
        ON T.商品コード = S.商品コード
     WHERE S.商品区分 = '3'
*注文がなかった雑貨商品についても出力するためにRIGHT JOINを用いている
*UNIONを用いることで商品、廃番商品に対して和集合を求めた結果を注文テーブルにJOINしている

69. SELECT S.商品コード , S.商品名 , S.単価 , COALESCE(T.数量 , 0) AS 売上数量 , S.単価 * COALESCE(T.数量 , 0) AS 総売上金額
      FROM 商品 AS S 
      LEFT JOIN (SELECT 商品コード , SUM(数量)  AS 数量
                   FROM 注文 
                  WHERE 商品コード LIKE 'B%'
                 GROUP BY 商品コード) AS T 
              ON S.商品コード = T.商品コード
     WHERE S.商品コード LIKE 'B%' ORDER BY S.商品コード



